import os
from gensim.models import Word2Vec
from gensim.utils import simple_preprocess

DATA_PATH = 'src/data/UD_English-EWT/en_ewt-ud-train.txt'
MODEL_PATH = "./results/word2vec_ewt.model"

def stream_sentences(file_path):
    """
    ƒê·ªçc d·ªØ li·ªáu d·∫°ng streaming (kh√¥ng load h·∫øt v√†o RAM)
    M·ªói d√≤ng ƒë∆∞·ª£c t√°ch th√†nh c√°c token b·∫±ng gensim.simple_preprocess
    """
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line:
                yield simple_preprocess(line)

def train_word2vec(sentences):
    """
    Hu·∫•n luy·ªán m√¥ h√¨nh Word2Vec t·ª´ d·ªØ li·ªáu
    """
    print("üîπ Training Word2Vec model...")
    model = Word2Vec(
        sentences=sentences,
        vector_size=100,    # k√≠ch th∆∞·ªõc vector embedding
        window=5,           # ng·ªØ c·∫£nh 5 t·ª´
        min_count=2,        # b·ªè qua c√°c t·ª´ xu·∫•t hi·ªán < 2 l·∫ßn
        workers=4,          # s·ªë lu·ªìng CPU
        sg=1                # d√πng Skip-Gram (0 = CBOW, 1 = Skip-Gram)
    )
    print("Training completed.")
    return model

def main():
    os.makedirs("results", exist_ok=True)

    print("Reading data from:", DATA_PATH)
    sentences = list(stream_sentences(DATA_PATH))
    print(f"Loaded {len(sentences)} sentences.")

    model = train_word2vec(sentences)

    model.save(MODEL_PATH)
    print(f"Model saved to {MODEL_PATH}")

    # 4Ô∏è‚É£ D√πng th·ª≠ model: t√¨m t·ª´ t∆∞∆°ng t·ª± v√† ph√©p to√°n vector
    test_word = "dog"
    if test_word in model.wv:
        print(f"\nTop similar words to '{test_word}':")
        for word, score in model.wv.most_similar(test_word, topn=5):
            print(f"  {word} ({score:.3f})")

    # Ph√©p to√°n vector: king - man + woman ‚âà queen
    analogy = ("king", "man", "woman")
    if all(w in model.wv for w in analogy):
        result = model.wv.most_similar(positive=[analogy[0], analogy[2]], negative=[analogy[1]], topn=1)
        print(f"\nAnalogy result: {analogy[0]} - {analogy[1]} + {analogy[2]} ‚âà {result[0][0]} ({result[0][1]:.3f})")

if __name__ == "__main__":
    main()
